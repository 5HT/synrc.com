
<div class="nonselectedwrapper">
<div class="article">
<div class="smallcol">

    <div class="block">
	<p><img src="../images/Io.png" border=0></p>
	<p>Io Language</p>
    </div>

</div>
<div class="articlecol">

	<h1>Язык программирования Io</h1>

	<h2>Часть 1. Примитивы</h2>

	<p>Здесь обсуждаются прототипы встроенные в саму
	виртуальную машину, которые составляют ядро языка и описывают полностью язык.
	Эти объекты реализованы на C#, мы опишем структуру этих объектов.
	Здесь не будет дано описание их слотов. Позде мы отдельно рассмотрим каждый объект.</p>

	<h3>Taxonomy</h3>

	<p>Все в Io &mdash; это обекты в терминилогии самого Io. Эти объекты представлены
	в реализации, объектами класса IoObject. Хотя, все из чего состоит объект &mdash;
	это слоты и их значения, тем не менее в реализации некоторые поля объекта, которые
	используются особенно часто, реализованы как члены класса в .NET. Одна из самых
	частых операций в Io &mdash; это клонировние, в котором заполняются эти поля,
	поэтому целесообразно оптимизировать это в самой виртуальной машине. А что бы все
	эти поля сделать видимыми можно написать активируемые слоты используя CLR рефлекшин.</P>

	<h3>Object</h3>

	<p>Рассмотрим поближе из чего состоит объект Io, и как работает
	объектная модель. Для єтого заглянем в реализацию базового
	прототипа на С#, основном объекте виртуальной машины, IoObject.</P>

	<div style="width:400%;float:left;margin-left:50px;margin-top:20px;margin-bottom:20px;">

	<table><tr><td>

	<table bgcolor=silver cellpadding=10 cellspacing=10>
	<tr><td bgcolor=white><code>uniqueId</code></td></tr>
	<tr><td bgcolor=white><code>name</code></td></tr>
	<tr><td bgcolor=white><code>slots</code></td></tr>
	<tr><td bgcolor=white><code>protos</code></td></tr>
	<tr><td bgcolor=white><code>isActivatable</code></td></tr>
	<tr><td bgcolor=white><code>hasDoneLookup</code></td></tr>
	<tr><td bgcolor=white><code>isLocals</code></td></tr>
	<tr><td bgcolor=white><code>state</code></td></tr>
	</table>

	</td><td width=5>
	</td><td>

	<div valign=top>
	<table bgcolor=silver cellpadding=10 cellspacing=10 >
	<tr><td bgcolor=white><code>proto</code></td></tr>
	<tr><td bgcolor=white><code>clone</code></td></tr>
	<tr><td bgcolor=white><code>activate</code></td></tr>
	<tr><td bgcolor=white><code>perform</code></td></tr>
	</table>
	</div>

	</td></tr></table>

	</div>

	<p>Слева неактивируемые справа активируемые в терминологии Io объекты. <b>uniqueId</b>
	это уникальный номер объекта в пределах виртуальной машины, <b>name</b> &mdash;
	имя типа объекта, которое доступно при вызове слота <b>type</b>, <b>slots</b> &mdash;
	это хештаблица, ключи которой являются объекты <b>Sequence</b>, а значения &mdash;
	объекта <b>Object</b>. <b>protos</b> &mdash; это список объектов прототипов, по
	которым будет производится лукап слота, которого нету в этом объекте. <b>state</b> &mdash;
	представляет собой указатель на истанцию виртуальной машины которой принадлежит объект.</p>

	<p>Кроме полей есть функции, которые используются объектами IoObject и их наследниками
	не как делегаты слотов. Эти функции могут быть реализованы как делегаты которые
	для каждого примитива присваиваются новые, либо как виртуальные функции
	которые при необходимости переопределяются. Вот основные из них:</p>


	<h3>proto</h3>

	<p>Функция которая создает самый первый примитив. Он отличается тем,
	что в его поле <b>protos</b> находятся только другие примитивы, и у него есть
	набор слотов объектов которые он представляет, значения слотов при лукапе от всех
	его клонов будут находится у этого прототипа. Кроме того эта функция регистрирует этот
	примитив в виртуальной машине, примитивы регистриют только один раз и идентифицируются
	по полю <b>name</b>, которое описано выше.</p>


	<h3>clone</h3>

	<p>Функция, которая только клонирует объект и
	больше ничего не делает. Эта функция, обычно копирует поля прототипа в только что
	созданный клон объекта с пустым набором слотов, и с одним элементом в
	списке <b>protos</b> прототипом, зарегистрированным в системе.</p>

	<h3>activate</h3>

	<p>Эта функция присутсвует только у активируемых
	объектов и вызывается они при их активации, когда необходипо получить не сам
	активируемый объект, а то что возвращает возвращает если его вызвать (активировать).</p>

	<h3>perform</h3>

	<p>Это ключевая функция не только <b>IoObject</b>, но и Io. Она осуществляет
	единичную обработку сообщения в цепочке. Она ищет слот в текущем контексте,
	и если внутри него активируемый объект, то он вызывается и возвращается результат,
	если же такого слота не найдено в данном объкте и рекурсивно во всех его прототипах,
	то вызывается слот <b>forward</b>. Но только в том случае если текущий контекст не
	представляет собой локальный контекст, как у блоков кода, в этом случае
	возвращается значение слота <b>self</b>, которое содержит скоуп этого локального контекста.</p>

	<p>Реализация этой функции может выглядеть следующим образом:</p>

	<div style="width:720px;margin-left:50px;margin-top:10px;margin-bottom:10px;float:left;">
		<table width=100% bgcolor=#F0F0F0 cellpadding="10"><tr><td><font color="black" size=3 face="Lucida Sans Unicode">
		<code><font color=blue>public</font> <font color=darkcyan>IoObject</font> perform(<font color=darkcyan>IoObject</font> target, <font color=darkcyan>IoObject</font> locals, <font color=darkcyan>IoObject</font> message)<br>
        {<br>
		&nbsp;&nbsp;&nbsp;&nbsp;<font color=darkcyan>IoMessage</font> msg = message as <font color=darkcyan>IoMessage;</font><br>
        &nbsp;&nbsp;&nbsp;&nbsp;<font color=darkcyan>IoObject</font> context = <font color=blue>null;</font><br>
        &nbsp;&nbsp;&nbsp;&nbsp;<font color=darkcyan>IoObject</font> slotValue = target.rawGetSlotContext(msg, <font color=blue>out</font> context);<br>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<font color=blue>if</font> (slotValue != <font color=blue>null</font>)<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=blue>return</font> slotValue.activate(target, locals, msg, context);<br>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<font color=blue>if</font> (target.isLocals)<br>
	    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=blue>return</font> <font color=darkcyan>IoObject</font>.slotLocalsForward(target, locals, message);<br>
	    <br>
	    &nbsp;&nbsp;&nbsp;&nbsp;<font color=blue>return</font> target.forward(target, locals, message);<br>
	    }</code></font></td></table>
	</div>


	<h3>Sequence</h3>

	<p>Строки IoSeq наследуются от объекта IoObject и добавляют только поле:</p>

	<div style="width:400%;float:left;margin-left:50px;margin-top:20px;margin-bottom:20px;">
	<table bgcolor=silver cellpadding=10 cellspacing=10>
	<tr><td bgcolor=white><code>value</code></td></tr>
	<tr><td bgcolor=white><code>mutable</code></td></tr>
	</table>
	</div>

	<p>Здесь <b>value</b> представляет собой набор байтов, который может быть интерпретирован,
	как UNICODE последовательность и представлять собой строку.</p>

	<p><b>mutable</b> говорит о том может ли модифицироваться значение <b>value</b>.</p>

	<p>Естественно что все объекты-примитивы виртуальной машины унаследованые от
	IoObject определяют свои <b>name</b>, <b>clone</b>, <b>proto</b>.</p>

	<h3>Number</h3>

	<p>IoNumber используется для хранения чисел. Ограниченой точности.</p>

	<div style="width:400%;float:left;margin-left:50px;margin-top:20px;margin-bottom:20px;">
	<table bgcolor=silver cellpadding=10 cellspacing=10>
	<tr><td bgcolor=white><code>value</code></td></tr>
	</table>
	</div>

	<p>Здесь <b>value</b> представляет собой либо Int64 либо Int32 либо
	Int16 либо Int8 либо Double. У этого объекта всегда можна узнать сколько
	именно байт нужно для хранения числа. Очевидно что этот объект используется
	для хранения чисел. </p>

	<h3>List и Map</h3>

	<div style="width:400%;float:left;margin-left:50px;margin-top:20px;margin-bottom:20px;">

	<table><tr><td>

	<table bgcolor=silver cellpadding=10 cellspacing=10>
	<tr><td bgcolor=white><code>list</code></td></tr>
	</table>

	</td><td>

	<div valign=top>
	<table bgcolor=silver cellpadding=10 cellspacing=10 >
	<tr><td bgcolor=white><code>map</code></td></tr>
	</table>
	</div>

	</td></tr></table>

	</div>

	<p><b>List</b> и <b>Map</b> не примечательны ничем, кроме того что содержат:
	один список <b>list</b>, второй хештаблицу <b>map</b>. <b>Map</b> в качестве ключей и значений может
	принимать любой объект Io.</p>

	<h3>CFunction</h3>

	<p>IoCFunction используется для хранения делегатов .NET. Все активируемые слоты
	примитивов виртуальной машины состоят из объектов IoCFunction.</p>

	<div style="width:400%;float:left;margin-left:50px;margin-top:20px;margin-bottom:20px;">
	<table bgcolor=silver cellpadding=10 cellspacing=10>
	<tr><td bgcolor=white><code>functName</code></td></tr>
	<tr><td bgcolor=white><code>func</code></td></tr>
	</table>
	</div>

	<p>Естественно, как активируемый объект, <b>CFunction</b> определяет свою
	функцию активации <b>activate</b>, которая просто вызывает .NET делегат <b>func</b></p>

	<h3>Message</h3>

	<h3>Block</h3>

	<div style="width:400%;float:left;margin-left:10px;">
	<blockquote><table bgcolor=silver cellpadding=10 cellspacing=10>
	<tr>
	<td bgcolor=white><code>containedMessage</code></td>
	</tr>
	<tr>
	<td bgcolor=white><code>argNames</code></td>
	</tr>
	<tr>
	<td bgcolor=white><code>scope</code></td>
	</tr>
	</table></blockquote>
	</div>

	<h3>Call</h3>

	<h3>Environment</h3>

</div>
<div class="toc last">

	<h2>TOC</h2>

	<a href="overview.htm">Введение</a><br>
	<a href="primitives.htm">Часть 1. Примитивы</a><br>
	<a href="object.htm">Часть 2. Object</a><br>

</div>
</div>
</div>

<div class="clear"></div>
