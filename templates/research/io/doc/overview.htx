
<div class="nonselectedwrapper">
<div class="article">
<div class="smallcol">

    <div class="block">
	<p><img src="../images/Io.png" border=0></p>
	<p>Io Language</p>
    </div>

</div>
<div class="articlecol">

	<h1>Язык программирования Io</h1>

	<h2>Введение</h2>

	<p>При написании этого текста стояла задача затронуть
	все аспекты языка в максимально сжатой форме и описывать язык по возможности
	аксиоматически, не упоминая понятия которые будут раскрываться в дальнейшем (хотя
	в принципе это невоможно). Предполагается, что читатель с базовыми концепциями
	программирования, и с Ъ ОПП системами программирования, типа CLOS или Smalltalk, а
	также читал оригинальный <a href="http://www.iolanguage.com/scm/git/checkout/Io/docs/IoGuide.html">The Io Programming Guide</a>,
	но автору будет очень приятно если
	кто-то успешно освоит язык пользуясь этим неформальным академическим введением.</p>

	<h3>Prototypes</h2>

	<p>Io это прототипный язык, в нем упразднено понятие класса, которое есть
	в CLOS. Т.е. имеется некий объект-прототип, а все остальные екземпляры создаются клонированием.
	Это означает, что, во-первых любой объект хранит всю свою метаинформацию, а во-вторых,
	может изменять свое структуру вплоть до объекта совершенно не имеюшего ничего общего
	с прототипом.</P>

	<p>Все экземпляры создаются в системе механизмом клонирования от первого созданого
	объекта в ситеме, который как правило называют прототипом. Прототипы находятся
	в общесистемной таблице прототипов.</P>

	<h3>Objects</h3>

	<p>Объект, главным образом состоит из слотов, которые содержат значения, другие объекты.
	Все слоты имеют имена, строковые объекты-значения <b>Sequence</b>. Одними из главных слотов
	объекта являются слоты "type" в котором хранится имя объекта, а также "protos", в
	котором находится список его прототипов. У объекта может быть несколько прототипов,
	это означает что Io поддерживает множественное наследование. Один из базовых прототипов
	от которого унаследованы другие прототипы &mdash; <b>Object</b>.</p>

	<h3>Sequence и Number</h3>

	<p>Строки представляются объектами порожденными от прототипа <b>Sequence</b>, числа как целые, так и double
	представляются
	объектами <b>Number</b>. <b>Sequence</b> &mdash; это первый объект строка созданный в системе, а так же
	любые константы в программе &mdash; все это <B>Sequence</B>. То же самое числа.</p>

	<h3>Slots</h3>

	<p>Рассмотрим примеры слотов. Начнем с "clone" и "type". Семантика слота "clone" говорит о том
	что если вы обратитесь к нему за значением вы получите копию от объекта, содержащего 
	этот слот. Слот "type" возвращает строковой объект-значение, имя типа объекта.
	Естественно что это значение легко изменить.</p>

	<p><b>clone</b> &mdash; Клонирование объекта:</p>
	<pre>
	Io> Object clone
	==> Object+42
	</pre>

	<p><b>type</b> &mdash; Узнать тип объекта:</p>
	<pre>
	Io> anObjectInstance type
	==> Sequence
	Io> anObjectInstance
	==> This is just a test string value holded in Sequence
	Io> 123 type
	==> Number
	Io> 123 type type
	==> Sequence
	Io> "Hello World" type
	==> Sequence
	</pre>

	<p><b>slotNames</b> &mdash; Узнать какие слоты есть у объекта:</p>
	<pre>
	Io> Number slotNames
	exp pow * log10 / log2 round - pi log asNumber e +
	==> 0
	Io> Object slotNames
	thisContext evalArg updateSlot ifNil method clone >= setSlot if init return
	ifNilEval message print < slotNames while cloneWithoutInit block thisMessage
	type <= != self setSlotWithType thisLocals println do == doMessage > getSlot
	evalArgAnd ReturnSelf compare
	==> Object+0</pre>

	<h3>Cloning</h3>

	<p>Мы уже знаем как клонировать объекты, давайте разберемся, что происходит
	при клонировании и как связаны объекты со своими прототипами. Несмотря на то, что
	у объекта может быть несколько прототипов, при клонировании
	объекта создается объект с одним прототипом, т.е. в его слоте "protos" только что
	клонированого объекта находится список с одим элементом, объектом от которого
	его клонировали. При этом таблица слотов вновь клонированого пустая:</p>

	<pre>
	Io> Number slotNames
	exp pow * log10 / log2 round - pi log asNumber e +
	==> 0
	Io> Number clone slotNames
	==> 0</pre>

	<p>Естественно, что у прототипа список прототипов пуст (как у прототипа <b>Object</b> или
	любого другого прототипа объекта который ни от кого не унаследован) или
	содержит другие прототипы, от которых он унаследован. Это и отличает прототипы от остальных
	объектов.</p>

	<pre>
	Io> Number protos
	==> list()
	Io> Number clone protos
	==> list(Number+0)</pre>

	<h3>Lookup</h3>

	<p>Это означает что при поиске слота, слоты ищутся сначала в текущем объекте, и,
	если не находятся, ищутся среди прототипов этого объекта, вот почему находятся слоты у
	клонируемых объектов:</p>

	<pre>
	Io> 0 exp
	==> 1
	Io> Number
	==> 0
	Io> Number exp
	==> 1
	Io> Number clone exp
	==> 1</pre>

	<p>Как видно слоты находятся и у константы, и у прототипа, и у объекта
	порожденного от прототипа.</p>

	<h3>Activation</h3>

	<p>Среди всех немногочисленных прототипов в системе есть два которые
	представляют исполняемый код: <b>CFunction</b> и <b>Block</b>.
	<b>CFunction</b> представляет собой делегат .NET, а <b>Block</b> &mdash;
	представляет код написанный на самом Io. Это так называемые активируемые объекты, еще
	говорят что они поддерживают активацию. При выполении сообщений, когда вы пишете:
	</p>

	<pre>
	Io> Number exp
	==> 1
	Io> 1 type
	==> Number</pre>

	<p>ищется слот с именем "exp" и если он поддерживает активацию то возвращается не само значение
	слота, функция, а то что она возвращает, ее результат. Если выполняется сообщение которое
	содержит имя слота, содержащего неактивируемый объект, например "type", то просто
	возвращается значение этого слота (в данном случае строка "Number").</p>

	<h3>Context</h3>

	<p>Рассмотрим, что произойдет когда вы просто напишете</p>

	<pre>
	Io> slotNames
	==> Lobby Protos</pre>

	<p>У какого объекта будет искаться слот <b>slotNames</b> ? Слот при исполнении ищется
	всегда в текущем контекcте, так написав в командной строке <b>slotNames</b> ищется
	слот у объекта установленного контекcтом по-умолчания для интерпретатора командной строки,
	однако если вы напишете:</p>

	<pre>
	Io> Protos slotNames
	==> Addons Core</pre>

	<p>то будет происходить следующее. Сначала будет искаться слот "Protos" в текущем контексте,
	он содержит объект унаследованый от <b>Object</b> у которого всего два
	слота <b>Addons</b> и <b>Core</b>, именно этот объект, значение слота "Protos",
	и будет установлен в качестве нового контекста исполнения. Слот "slotNames" будет
	уже искаться начиная с нового контекста исполнения, и найдя в своем
	прототипе <b>Object</b> слот "slotNames" выведется список слотов текущего
	контекста исполнения.</p>

	<h3>Message</h3>

	<p>Когда вы пишете:</p>

	<pre>
	Io> Number log (2)
	==> -Infinity</pre>

	<p>Все это представляет собой цепочку объектов <b>Message</b>. Само сообщение
	состоит из имени слота который будет
	искаться в контекте выполнения сообщения, списка параметров, каждый из которых
	представляет собой тоже сообщение, и указателю на следующее сообщение в цепочке сообщений.
	При выполнении цепочки сообщении сообщения выполняются последовательно, изменяя
	текущий контекст исполнения как было описано выше и при взятии значения слота (нового
	контекста исполненя для цепочки) используется механизм активации описаный више.
	</p>

	<p>Рассмотрим цепочку сообщений</p>

	<pre>
	Io> 0 exp * (1) / (2)
	==> 0.5</pre>

	<p>Последовательно выполняются три сообщения "exp", "*" и "/", у последних двух есть параметры: единица и двойка.
	В процессе выполнении этой цепочки контекст исполнения меняется с 0 (объекта Number)
	до результата выражения.</p>

	<h3>Grammar</h3>

	<p>Мы подобрались к формальному описанию языка. Синтаксис языка очень выразительный:</p>

	<p><div style="width:600px;margin-left:50px;margin-top:10px;margin-bottom:10px;float:left;">
		<table width=500 bgcolor="gray" cellpadding="10"><tr><td><font color="white" size=3 face="Lucida Sans Unicode">
		<code>program ::= message [ program ]<br>
		message ::= symbol [ "(" [ message [ "," message ] ] ")" ]</code></font></td></table>
	</div><div class="clear"></div></p>

	<p>Это все. На этом формальное описание языка можна закончить.</p>

	<h3>Arguments</h3>

	<p>Передача аргуметов в Io просиходит не так как в большинстве языков. Обычно перед
	тем как передать аргументы в функции они сначала вычисляются, в Io каждый аргумент
	передаются в виде сообщения, которое в общем случае представляет
	собой цепочку сообщений, которые выполняются уже внутри функции,
	которая может получит переданый параметр в виде цепочки сообщений по
	порядковому номеру. Это так называемое
	lazy argument evaluation.</p>

</div>
<div class="toc last">

	<h2>TOC</h2>

	<a href="overview.htm">Введение</a><br>
	<a href="primitives.htm">Часть 1. Примитивы</a><br>
	<a href="object.htm">Часть 2. Object</a><br>

</div>
</div>
</div>

<div class="clear"></div>
