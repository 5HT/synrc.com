<!DOCTYPE html>
<html >
<head>

  <link rel=stylesheet type="text/css" href="http://synrc.com/synrc.css">
  <meta name="Author" content="5HT">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta property="og:image" content="images/s_64.png"/>
  <meta http-equiv="X-UA-Compatible" content="IE=IE10,chrome=1" />
  <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
  <title>N2O Endpoints
</title>
</head>
<body >
<!--HEVEA command line is: hevea endpoints.tex -o endpoints.htm -->
<!--CUT STYLE article--><!--HTMLHEAD-->

<div class="nonselectedwrapper white" style="padding: 10px 0px 10px 0px;margin: 0px 0px 10px 0px;">
    <a href="//synrc.com/">
    <img style="flat:left; margin-left: 55px; margin-top: 5px; margin-bottom:-5px;" src="http://synrc.com/images/synrc.png" border="0"></a>
    <div align=right style="margin: -50px 50px 0px 0px;">
        <script language="JavaScript">

        var args = (window.location).toString().split('/');
        var page_name = args[args.length-1];
        var menu = {'http://synrc.com/index.htm':    'Home',
                    'http://synrc.com/research.htm': 'Showcase',
                    'http://synrc.com/apps/':   'Apps',
                    'http://synrc.com/feedback.htm': 'Contacts',
                    'http://spawnproc.com':   '<b>Spawnproc</b>', };

        Object.keys(menu).forEach(function (key) {
            if (page_name == key) { document.write('<div class="menu" style="font-weight: bold;">'+menu[key]+'</div>'); }
            else { document.write('<a class="menu" href="'+key+'">'+menu[key]+'</a>'); }
        });

        </script>
    </div>
</div>

<hr size="1">

<!--ENDHTML-->
<!--CUT DEF section 1 --><div class="nonselectedwrapper">
<div class="article">
<div class="toc">
<!--TOC section id="sec1" TOC-->
<h2 id="sec1" class="section">TOC</h2><!--SEC END -->
<!--TOC paragraph id="sec2" -->
<!--SEC END --><p>
<a href="http://synrc.com/apps/n2o/doc/web">Overview</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/setup.htm">1. Setup</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/processes.htm">2. Processes</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/endpoints.htm">3. Endpoints</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/handlers.htm">4. Handlers</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/protocols.htm">5. Protocols</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/macros.htm">6. JavaScript</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/api.htm">7. API</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/elements.htm">8. Elements</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/actions.htm">9. Actions</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/packages.htm">10. Packages</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/persistence.htm">11. Persistence</a> <br>

<a href="http://synrc.com/apps/n2o/doc/web/utf8.htm">12. UTF-8</a> <br>
</p><p><a href="http://synrc.com/apps/n2o/doc/book.pdf">Download PDF</a> <br>

</p></div>

<div class="articlecol">

<!--TOC section id="sec3" Endpoints-->
<h2 id="sec3" class="section">Endpoints</h2><!--SEC END --><p>
N2O Erlang Processes are instantiated and run by Web Server.
Depending on Web Server endpoint bindings you can specify
module for HTTP requests handling.</p>
<!--TOC paragraph id="sec4" -->
<!--SEC END --><p>
N2O comes with three endpoint handlers for each Web Server supported.
However you are not required to use any of these.
You can implement your own endpoint handlers, e.g. for using with
Meteor.js or Angular.js and providing Erlang back-end event streaming
from server-side. Here is an example of using HTTP, WebSocket and
REST endpoint handlers with Cowboy Web Server.</p><div class="lstlisting">    {"/rest/:resource", rest_cowboy, []},
    {"/rest/:resource/:id", rest_cowboy, []},
    {"/ws/[...]", bullet_handler, [{handler, n2o_bullet}]},
    {'_', n2o_cowboy, []}</div>
<!--TOC subsection id="sec5" HTML Pages over HTTP-->
<h3 id="sec5" class="subsection">HTML Pages over HTTP</h3><!--SEC END --><p>
This handler is used for serving initial dynamic HTML page.
In case you are serving static HTML content this handler is
not included into the running stack. <span style="font-weight:bold">n2o</span><span style="font-weight:bold">_</span><span style="font-weight:bold">cowboy</span> is
a default HTML page handler.</p>
<!--TOC paragraph id="sec6" -->
<!--SEC END --><p>
On initial page load <span style="font-weight:bold">n2o</span><span style="font-weight:bold">_</span><span style="font-weight:bold">document</span><span style="font-weight:bold">:run</span> of page document endpoint is started.
During its execution <span style="font-weight:bold">wf</span><span style="font-weight:bold">_</span><span style="font-weight:bold">render</span><span style="font-weight:bold">:render</span> proceeds
by calling <span style="font-weight:bold">Module:main</span> selected by the routing handler.</p>
<!--TOC subsection id="sec7" JavaScript Events over WebSocket-->
<h3 id="sec7" class="subsection">JavaScript Events over WebSocket</h3><!--SEC END --><p>
JavaScript handler shares the same router information as the
HTML handler because during its initial phase the same chain
of N2O handlers is called.</p>
<!--TOC paragraph id="sec8" -->
<!--SEC END --><p>
This handler knows how to deal with XHR and WebSocket requests.
<span style="font-weight:bold">n2o</span><span style="font-weight:bold">_</span><span style="font-weight:bold">bullet</span> is a default JavaScript event handler
based on Bullet library created by Loïc Hoguin.</p>
<!--TOC paragraph id="sec9" -->
<!--SEC END --><p>
You can send several types of events directly from JavaScript
using various protocols. E.g. you man need to use client protocol:</p><div class="lstlisting">JavaScript&gt; ws.send(enc(tuple(atom('client'),
                   tuple(atom('phone_auth'),"+380.."))));</div><p>And catch this event at Erlang side:</p><div class="lstlisting">event({client,{phone_auth,Phone}}) -&gt;
    io:format("Phone: ~p~n",[Phone]).</div><p>You can also send direct messages to event/1, but use it carefully
because it may violate security rules.</p><div class="lstlisting">&gt; ws.send(enc(tuple(atom('direct'),atom('init'))));</div><p>With catching at Erlang side:</p><div class="lstlisting">event(init) -&gt;
    io:format("Init called~n").</div>
<!--TOC subsection id="sec10" HTTP API over REST-->
<h3 id="sec10" class="subsection">HTTP API over REST</h3><!--SEC END --><p>
REST handler’s request context initialization differs for the one
used by HTML and JavaScript handlers. N2O handler chains are not
applied to REST requests. <span style="font-weight:bold">rest_cowboy</span> is a default REST
handler.</p><div class="lstlisting">    {"/rest/:resource", rest_cowboy, []},
    {"/rest/:resource/:id", rest_cowboy, []},</div><div class="center">Listing 1: users.erl</div><p><br>
</p><div class="lstlisting">    -module(users).
    -behaviour(rest).
    -compile({parse_transform, rest}).
    -include("users.hrl").
    -export(?REST_API).
    -rest_record(user).

    init() -&gt; ets:new(users,
                    [public, named_table, {keypos, #user.id}]).

    populate(Users) -&gt; ets:insert(users, Users).
    exists(Id) -&gt; ets:member(users, wf:to_list(Id)).
    get() -&gt; ets:tab2list(users).
    get(Id) -&gt; [User] = ets:lookup(users, wf:to_list(Id)), User.
    delete(Id) -&gt; ets:delete(users, wf:to_list(Id)).
    post(#user{} = User) -&gt; ets:insert(users, User);
    post(Data) -&gt; post(from_json(Data, #user{})).</div><p>To add users to in-memory storage perform POST requests:</p><div class="lstlisting">    curl -i -X POST -d "id=vlad" localhost:8000/rest/users
    curl -i -X POST -d "id=doxtop" localhost:8000/rest/users
    curl -i -X GET localhost:8000/rest/users
    curl -i -X PUT -d "id=5HT" localhost:8000/rest/users/vlad
    curl -i -X GET localhost:8000/rest/users/5HT
    curl -i -X DELETE localhost:8000/rest/users/5HT</div><p>

    <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'synrc'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="https://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    

</p></div>
</div>
</div><div class="clear"> </div><!--CUT END -->
<!--HTMLFOOT-->

<div class="nonselectedwrapper">
<div class="verywidecol">

    <div style="width:100%;height:300px;float:left;font-size:16pt;" align=center>
    	<hr size=1>
    	<br><br><br>
        <a href="//synrc.com/news/index.htm">Events</a> |
    	<a href="//synrc.com/privacy.htm">Privacy Policy</a> |
        <a href="//synrc.com/feedback.htm">Feedback</a> |
        <a href="//synrc.com/brandbook.htm">Brandbook</a><br>
    	Copyright &copy; 2005&ndash;2015 <a href="//synrc.com/index.htm"> Synrc Research Center s.r.o.</a>
    </div>

</div>
</div>

<div class="clear"></div>

<script type="text/javascript">

  var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-29227518-1']);
      _gaq.push(['_trackPageview']);
      
        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
                    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
                      })();
                      
                      </script>

<script type="text/javascript" src="//synrc.com/hi.js"></script>
<!--ENDHTML-->
</body>
</html>
