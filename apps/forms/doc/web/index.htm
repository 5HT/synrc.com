<!DOCTYPE html>
<html >
<head>

  <link rel=stylesheet type="text/css" href="http://synrc.com/synrc.css">
  <meta name="Author" content="5HT">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta property="og:image" content="images/s_64.png"/>
  <meta http-equiv="X-UA-Compatible" content="IE=IE10,chrome=1" />
  <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
  <title>index</title>
</head>
<body >
<!--HEVEA command line is: hevea index.tex -o index.htm -->
<!--CUT STYLE article--><!--CUT DEF section 1 --><div class="nonselectedwrapper">
<div class="article">

<div class="articlecol">

<!--TOC section id="sec1" FORMS: User Applications-->
<h2 id="sec1" class="section">FORMS: User Applications</h2><!--SEC END --><p>
FORMS application provides set of CSS stylesheets for compact forms definitions
and also it provides database model for storing metadata information about
documents, fields and validations.</p>
<!--TOC subsection id="sec2" Overview-->
<h3 id="sec2" class="subsection">Overview</h3><!--SEC END --><p>
The basic idea that stands behind form models is that N2O forms are able to be
generated from its metamodel which is also a root for other generated
persisted Erlang records for KVS storage. N2O book is the best for the taxonomy
of N2O forms and KVS interface. This kind of metainterpretation and unification of
containers is usual for enterprise and common object oriented systems.</p>
<!--TOC subsection id="sec3" Metainformation-->
<h3 id="sec3" class="subsection">Metainformation</h3><!--SEC END --><p>
Metainformation declares the documents (#document) and its
fields (#field) which forms a document level entity that can
be stored in database. Usually somewhere in ACT or in DBS
applications you can find its document definition in Erlang
records which is entered with forms.</p>
<!--TOC subsection id="sec4" Document-->
<h3 id="sec4" class="subsection">Document</h3><!--SEC END --><p>
The #document object is an application form definition.
It consists of sections (#sec) that include fields with
its descriptions and validations.</p><div class="lstlisting">-record(document,   { ?ITERATOR(feed),
                      name,
                      base,
                      sections,
                      fields,
                      buttons,
                      access }).</div><p>Each section #sec of forms are entitled with heading font.</p><div class="lstlisting">-record(sec,        { id, name, desc="" }).</div><p>Forms age given with its control buttons (#but).
The information from field postback in button is directly translated
to N2O element postback during forms:new/2.</p><div class="lstlisting">-record(but,        { id, postback, name, title,
                      sources=[], class }).</div>
<!--TOC subsection id="sec5" Validation-->
<h3 id="sec5" class="subsection">Validation</h3><!--SEC END --><p>
Since document consists of validations and fields, here is their
record definitions in FORMS model:</p><div class="lstlisting">-record(validation, { name, type, msg,
                      extract = fun(X) -&gt; X end, options=[],
                      function, field={record,pos} }).

-record(opt,        { id, name, title, postback, checked=false }).
-record(sel,        { id, name, title, postback }).
-record(field,      { id, sec=1, name, pos, title, layout,
                      visible=true, disabled=false,
                      format="~w", curr="", options=[],
                      postfun=[], desc, wide=normal,
                      type=binary, etc, access, tooltips=[] }).</div>
<!--TOC subsection id="sec6" Data Model-->
<h3 id="sec6" class="subsection">Data Model</h3><!--SEC END --><p>
KVS Data Model is being generated from Metainformation.
KVS layer along with FEEDS server provide persistence facilities.</p>
<!--TOC subsection id="sec7" Application-->
<h3 id="sec7" class="subsection">Application</h3><!--SEC END --><p>
JavaScript Web Application is generated using Metainformation and Data Model.
N2O is used as DSL language for forms generation.
JavaScript/OTP is also used for forms generation.
Forms average render speed is 50 FPS (forms per second).</p>
<!--TOC subsection id="sec8" Documents-->
<h3 id="sec8" class="subsection">Documents</h3><!--SEC END --><div class="lstlisting"> document(Name,Phone) -&gt;
                #document { name = Name,

    sections =[ #sec      { name= [&lt;&lt;"Input OTP sent to "&gt;&gt;,
                            wf:to_list(Phone#phone.number)] } ],

    buttons  =[ #but      { name='decline', title = &lt;&lt;"Cancel"&gt;&gt;,
                            class=cancel,
                            postback={'CloseOpenedForm', Name} },

                #but      { name='next', title = &lt;&lt;"Continue"&gt;&gt;,
                            class=[button,green],
                            postback={'Spinner', {'OpenForm',Name}},
                            sources=[otp] } ],

    fields   =[ #field    { name='otp', type=otp,
                            title= &lt;&lt;"Password"&gt;&gt;,
                            labelClass=label,
                            fieldClass=column3} ] }.</div><p>

<img src="../images/Forms.png" style="margin-left: -20px;margin-botton: 30px; padding:20 20 20 20px;"><br>

Picture. <span style="font-weight:bold">Form Sample</span><br>
<br>


</p>
<!--TOC subsection id="sec9" Fields-->
<h3 id="sec9" class="subsection">Fields</h3><!--SEC END -->
<!--TOC subsection id="sec10" Validation Rules-->
<h3 id="sec10" class="subsection">Validation Rules</h3><!--SEC END --><p>
Validation rules should be applied by developer.
Erlang and JavaScript/OTP is used to define validation
rules applied to documents during workflow.</p>
<!--TOC subsection id="sec11" Form Autogeneration-->
<h3 id="sec11" class="subsection">Form Autogeneration</h3><!--SEC END -->
<!--TOC subsection id="sec12" XForms and XMPP Data Forms-->
<h3 id="sec12" class="subsection">XForms and XMPP Data Forms</h3><!--SEC END --><p>
The other well known standard is XForms that could be easily converted
to both directions by FORMS application. XForms W3C standard strives to be supported by browsers.
The other XML forms standard is XEP-0004 Data Forms which is supported by most XMPP clients:</p><div class="lstlisting">&lt;x xmlns='jabber:x:data' type='{form-type}'&gt;
  &lt;title/&gt;&lt;instructions/&gt;&lt;desc/&gt;
  &lt;field var='OS' type='int' label='description'&gt;
    &lt;value&gt;3&lt;/value&gt;
    &lt;option label='Windows'&gt;&lt;value&gt;3&lt;/value&gt;&lt;/option&gt;
    &lt;option label='Mac'&gt;&lt;value&gt;2&lt;/value&gt;&lt;/option&gt;
    &lt;option label='Linux'&gt;&lt;value&gt;1&lt;/value&gt;&lt;/option&gt;
  &lt;/field&gt;
&lt;/x&gt;</div></div>
</div>
</div><div class="clear">Â </div><!--CUT END -->
<!--HTMLFOOT-->
<!--ENDHTML-->
</body>
</html>
